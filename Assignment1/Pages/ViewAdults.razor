@page "/ViewAdults"
@using Assignment1.Data
@using Assignment1.Model
@inject IAdultsData AdultsData
@inject NavigationManager _navigationManager

<h1>Adults</h1>

<p>
    Filter by Adult's first name: <input type="text" @oninput="@((arg) => SearchByName(arg))" style="width: 50px"/>
</p>
<p>
    Filter by gender:
    <select class="form-control selective" @onchange="@((arg) => FilterByGender(arg))" style="width:50px">
        <option>M</option>
        <option>F</option>
    </select>
</p>

@if (adultsToShow == null)
{
    <p>
        <em>Loadin...</em>
    </p>
}else if (!adultsToShow.Any())
{
    <p>
        <em>No adults exist</em>
    </p>
}
else
{
    <table class="table" style="border: 1px solid black">
        <thead>
        <tr style="border: 1px solid black">
            <th>Adult ID</th>
            <th>Adult first name</th>
            <th>Adult last name</th>
            <th>Adult gender</th>
            <th>Adult age</th>
            <th>Adult job title</th>
            <th>Adult salary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item  in adultsToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.Sex</td>
                <td>@item.Age</td>
                <td>@item.JobTitle.JobTitle</td>
                <td>@item.JobTitle.Salary</td>
            </tr>
        }
        </tbody>
    </table>





@code{
    private IList<Adult> allAduts;
    private IList<Adult> adultsToShow;

    private string? searchByName;
    private string? filterByGender;

    private void SearchByName(ChangeEventArgs changeEventArgs)
    {
        searchByName = null;
        try
        {
            searchByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {}
        if (searchByName != null)
        {
            adultsToShow = allAduts.Where(adult => adult.FirstName.Equals(searchByName)).ToList();
        }
        else
        {
            adultsToShow = allAduts;
        }
    }

    private void FilterByGender(ChangeEventArgs changeeventArgs)
    {
        filterByGender = null;
        try
        {
            filterByGender = changeeventArgs.Value.ToString();
        }
        catch (Exception e)
        {}
        if (filterByGender != null)
        {
            adultsToShow = allAduts.Where(adult => adult.Sex.Equals(filterByGender, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            adultsToShow = allAduts;
        }
    }
    

   


    protected override async Task OnInitializedAsync()
    {
        allAduts = AdultsData.GetAdults();
        adultsToShow = allAduts;
    }
    
    }

}
